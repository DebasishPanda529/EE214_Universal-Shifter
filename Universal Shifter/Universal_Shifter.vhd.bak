library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;

entity MUX is
 port (A: in std_logic_vector(1 downto 0); S: in std_logic_vector(0 downto 0); OUTPUT: out std_logic);
end entity MUX;

architecture Struct of MUX is
 signal S_BAR, S0, S1: std_logic;
begin
  AND1: AND_2 port map (A => A(0), B => S_BAR, Y => S0);
  AND2: AND_2 port map (A => A(1), B => S, Y => S1);
  INV1: INVERTER port map (A => S, Y => S_BAR);
  OR1: OR_2 port map (A => S0, B => S1, Y => OUTPUT);
end Struct;

-------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.Gates.all;

entity Universal_Shifter is
 port (A: in std_logic_vector(7 downto 0); B: in std_logic_vector(3 downto 0); L: in std_logic_vector(0 downto 0); Y: out std_logic_vector(7 downto 0));
end entity Universal_Shifter;

architecture Complex of Universal_Shifter is
 signal Q: std_logic_vector(7 downto 0); 
 
   component MUX is
	port (P: in std_logic_vector(1 downto 0); S: in std_logic_vector(0 downto 0); OUTPUT: out std_logic);
	end component MUX;

   for all: MUX
   use entity work.MUX(Struct);
	
begin 
 for i in 0 to 7 generate:
 MUX1: MUX port map (A(i), A(7-i), L, Q(i));
end Complex;
 
 
